//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Traslation"",
            ""id"": ""4c3f450b-0e7e-4880-9e3c-8fd2fe192437"",
            ""actions"": [
                {
                    ""name"": ""Lateral"",
                    ""type"": ""Value"",
                    ""id"": ""1f344bc3-d6e0-4f08-bea6-a50b43411b42"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Forward"",
                    ""type"": ""Value"",
                    ""id"": ""68011515-5dd8-4862-b560-82fac307470e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b4fe094f-0dc8-4ee1-9f6e-b5ddcac84a7a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9beec14e-f7d0-4231-bdc6-79b20901e41e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6f224600-3b0d-46bc-9c79-afbe9e4cef5e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f56c12e2-8645-4f8d-934f-a9d232e33dac"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3466debb-f838-4c29-ab35-05349d7a377b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""62ce448b-1ff1-4c31-9a49-34321072e4b5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Rotation"",
            ""id"": ""5c3af92f-85a1-44e7-9221-e9ff2d63ffb7"",
            ""actions"": [
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""ab536aed-a0a3-4f1e-999e-4851287a307f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""30bf4e6d-068c-4766-9618-cc893761f32d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""524f5331-868b-41fd-8497-118231d27cab"",
                    ""path"": ""<Pointer>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb2e7edd-dce7-46cf-b5ec-7453fc1cade7"",
                    ""path"": ""<Pointer>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Selections"",
            ""id"": ""565b5584-9a8f-44e0-917a-66089bfdb676"",
            ""actions"": [
                {
                    ""name"": ""ItemSelection"",
                    ""type"": ""Value"",
                    ""id"": ""d3ba7439-5d60-4646-b786-b266c318f0cd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Unselect"",
                    ""type"": ""Value"",
                    ""id"": ""1bb9acb4-99bf-46cd-a6bb-8a12419e0c5b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""da50d5d7-9eab-4e66-aaa0-5511ffa59798"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b10dbac9-dc16-4f5d-ad20-6d3c2b788f04"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Unselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerShoot"",
            ""id"": ""84f01671-9477-4bf9-b16f-886675dd1690"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""bec6a1c7-de4f-4e72-9f0e-ce0e998ceb36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""819661b7-093e-4d86-8b9f-195695ee933b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Traslation
        m_Traslation = asset.FindActionMap("Traslation", throwIfNotFound: true);
        m_Traslation_Lateral = m_Traslation.FindAction("Lateral", throwIfNotFound: true);
        m_Traslation_Forward = m_Traslation.FindAction("Forward", throwIfNotFound: true);
        // Rotation
        m_Rotation = asset.FindActionMap("Rotation", throwIfNotFound: true);
        m_Rotation_Pitch = m_Rotation.FindAction("Pitch", throwIfNotFound: true);
        m_Rotation_Yaw = m_Rotation.FindAction("Yaw", throwIfNotFound: true);
        // Selections
        m_Selections = asset.FindActionMap("Selections", throwIfNotFound: true);
        m_Selections_ItemSelection = m_Selections.FindAction("ItemSelection", throwIfNotFound: true);
        m_Selections_Unselect = m_Selections.FindAction("Unselect", throwIfNotFound: true);
        // PlayerShoot
        m_PlayerShoot = asset.FindActionMap("PlayerShoot", throwIfNotFound: true);
        m_PlayerShoot_Shoot = m_PlayerShoot.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Traslation
    private readonly InputActionMap m_Traslation;
    private List<ITraslationActions> m_TraslationActionsCallbackInterfaces = new List<ITraslationActions>();
    private readonly InputAction m_Traslation_Lateral;
    private readonly InputAction m_Traslation_Forward;
    public struct TraslationActions
    {
        private @PlayerInput m_Wrapper;
        public TraslationActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lateral => m_Wrapper.m_Traslation_Lateral;
        public InputAction @Forward => m_Wrapper.m_Traslation_Forward;
        public InputActionMap Get() { return m_Wrapper.m_Traslation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TraslationActions set) { return set.Get(); }
        public void AddCallbacks(ITraslationActions instance)
        {
            if (instance == null || m_Wrapper.m_TraslationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TraslationActionsCallbackInterfaces.Add(instance);
            @Lateral.started += instance.OnLateral;
            @Lateral.performed += instance.OnLateral;
            @Lateral.canceled += instance.OnLateral;
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
        }

        private void UnregisterCallbacks(ITraslationActions instance)
        {
            @Lateral.started -= instance.OnLateral;
            @Lateral.performed -= instance.OnLateral;
            @Lateral.canceled -= instance.OnLateral;
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
        }

        public void RemoveCallbacks(ITraslationActions instance)
        {
            if (m_Wrapper.m_TraslationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITraslationActions instance)
        {
            foreach (var item in m_Wrapper.m_TraslationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TraslationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TraslationActions @Traslation => new TraslationActions(this);

    // Rotation
    private readonly InputActionMap m_Rotation;
    private List<IRotationActions> m_RotationActionsCallbackInterfaces = new List<IRotationActions>();
    private readonly InputAction m_Rotation_Pitch;
    private readonly InputAction m_Rotation_Yaw;
    public struct RotationActions
    {
        private @PlayerInput m_Wrapper;
        public RotationActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pitch => m_Wrapper.m_Rotation_Pitch;
        public InputAction @Yaw => m_Wrapper.m_Rotation_Yaw;
        public InputActionMap Get() { return m_Wrapper.m_Rotation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotationActions set) { return set.Get(); }
        public void AddCallbacks(IRotationActions instance)
        {
            if (instance == null || m_Wrapper.m_RotationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotationActionsCallbackInterfaces.Add(instance);
            @Pitch.started += instance.OnPitch;
            @Pitch.performed += instance.OnPitch;
            @Pitch.canceled += instance.OnPitch;
            @Yaw.started += instance.OnYaw;
            @Yaw.performed += instance.OnYaw;
            @Yaw.canceled += instance.OnYaw;
        }

        private void UnregisterCallbacks(IRotationActions instance)
        {
            @Pitch.started -= instance.OnPitch;
            @Pitch.performed -= instance.OnPitch;
            @Pitch.canceled -= instance.OnPitch;
            @Yaw.started -= instance.OnYaw;
            @Yaw.performed -= instance.OnYaw;
            @Yaw.canceled -= instance.OnYaw;
        }

        public void RemoveCallbacks(IRotationActions instance)
        {
            if (m_Wrapper.m_RotationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotationActions instance)
        {
            foreach (var item in m_Wrapper.m_RotationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotationActions @Rotation => new RotationActions(this);

    // Selections
    private readonly InputActionMap m_Selections;
    private List<ISelectionsActions> m_SelectionsActionsCallbackInterfaces = new List<ISelectionsActions>();
    private readonly InputAction m_Selections_ItemSelection;
    private readonly InputAction m_Selections_Unselect;
    public struct SelectionsActions
    {
        private @PlayerInput m_Wrapper;
        public SelectionsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ItemSelection => m_Wrapper.m_Selections_ItemSelection;
        public InputAction @Unselect => m_Wrapper.m_Selections_Unselect;
        public InputActionMap Get() { return m_Wrapper.m_Selections; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectionsActions set) { return set.Get(); }
        public void AddCallbacks(ISelectionsActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectionsActionsCallbackInterfaces.Add(instance);
            @ItemSelection.started += instance.OnItemSelection;
            @ItemSelection.performed += instance.OnItemSelection;
            @ItemSelection.canceled += instance.OnItemSelection;
            @Unselect.started += instance.OnUnselect;
            @Unselect.performed += instance.OnUnselect;
            @Unselect.canceled += instance.OnUnselect;
        }

        private void UnregisterCallbacks(ISelectionsActions instance)
        {
            @ItemSelection.started -= instance.OnItemSelection;
            @ItemSelection.performed -= instance.OnItemSelection;
            @ItemSelection.canceled -= instance.OnItemSelection;
            @Unselect.started -= instance.OnUnselect;
            @Unselect.performed -= instance.OnUnselect;
            @Unselect.canceled -= instance.OnUnselect;
        }

        public void RemoveCallbacks(ISelectionsActions instance)
        {
            if (m_Wrapper.m_SelectionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectionsActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectionsActions @Selections => new SelectionsActions(this);

    // PlayerShoot
    private readonly InputActionMap m_PlayerShoot;
    private List<IPlayerShootActions> m_PlayerShootActionsCallbackInterfaces = new List<IPlayerShootActions>();
    private readonly InputAction m_PlayerShoot_Shoot;
    public struct PlayerShootActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerShootActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_PlayerShoot_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_PlayerShoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerShootActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerShootActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerShootActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerShootActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IPlayerShootActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IPlayerShootActions instance)
        {
            if (m_Wrapper.m_PlayerShootActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerShootActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerShootActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerShootActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerShootActions @PlayerShoot => new PlayerShootActions(this);
    public interface ITraslationActions
    {
        void OnLateral(InputAction.CallbackContext context);
        void OnForward(InputAction.CallbackContext context);
    }
    public interface IRotationActions
    {
        void OnPitch(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
    }
    public interface ISelectionsActions
    {
        void OnItemSelection(InputAction.CallbackContext context);
        void OnUnselect(InputAction.CallbackContext context);
    }
    public interface IPlayerShootActions
    {
        void OnShoot(InputAction.CallbackContext context);
    }
}
